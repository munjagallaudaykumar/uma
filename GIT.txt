Version Controlling
=======================
This is the process of maintianing multiple versions of the code
All the team members uplaod their code(check in) into the remote
version controlling system.The VCS accepts the code uplaods from 
multiple team members and integrates it so that when the other
team members download the code they will be able to see the entire
work donw by the team

VCS's also preserve older and later versions of the code so that
at any time we can switch between which ever version we want

VCS's also keep a track of who is making what kind of changes

======================================================================

VCS's are categorised into 2 types
1 Centralised version controlling
2 Distributed version controlling

Centralised Version controlling
-----------------------------------
Here we have a remote server(code repository) into which all the team 
members check in the code and all the features of version controlling
are implemented in this remote server

 Distributed version controlling
-------------------------------------
Here we have a local repository installed on every team members machines
where version controlling happens at the level of individual team members
form where it is uploaded into a remote server where version cotrolling 
happens for the entire team

====================================================================
Setting up git on Windows
-------------------------------
1 Download git from
  https://git-scm.com/downloads

2 Install it

3 Open gitbash and execute the git commands

======================================================================
Setting up git in ubuntu linux servers
--------------------------------------------
1 Update the apt repository
  sudo apt-get update

2 Install git
  sudo apt-get install -y git

----------------------------------------------------------------------
Configuring user and email globally for all users on a system
git config --global user.name "sai krishna"
git config --global user.email "intelliqittrainings@gmail.com"

-----------------------------------------------------------------------
On the local machine git uses three sections
1 Working directory
2 Stagging Area
3 Local repository

Working directory is the location where all the code is created
Initially all the files present here are called as untracked files

Stagging area is the location where file indexing happens and it 
is the buffer area of git and the files are called as indexed files

Local repository is where version controlling happens and the files
are called as commited files
============================================================================
1 To initilise a folder as a git repository
  git init
  This will create a hidden folder called .git where it stores all the
  configurations necessary for git.

2 To send a file into stagging area
  git add filename
  To send multiple files into stagging area
  git add file1 file2 file3
  To send all the files and foders and sub folders into stagging area
  git add .
  Note . represents present working directory

3 To send the files back from staggig area to working directory
  git rm --cached filename
  (or)
  git reset filename

4 To send the files from stagging area to local repository
  git commit -m "some message"

5 To see the status of unsteacked and stagged files
  git stauts

6 To see the commits done on local repository
  git log
  To see the above output in once line format
  git log --oneline

======================================================================
Day 2
========================================================================
.gitignore:This is a special configuration file which is used
to hide the private files info.Any file whose name is mentioned
in .gitignore will no longer be accessed by git

1 Create few files
  touch f1 f2 f3 f4 f5

2 Check the status of git
  git status
  This will show the above 5 files as untracked files

3 Create .gitignore and store the above 5 file names in it
  cat > .gitignore
  f1
  f2
  f3
  f4
  f5
  To come out of cat command press ctrl+d  

4 Check the status of git
  git status
  This will only show .gitignore as untracked
  f1-f5 are no longer accessable by git



==============================================================================
Branching in Git
========================
This is a feature of git using which we can create seperate branches
for different functionalites and later merge them with the main branch
also known as the master branch.This will help in creating the code in
an uncluttered way

1 To see the list of local branches
  git branch

2 To see the list all branches local and remote
  git branch -a

3 To create a branch
  git branch branch_name

4 To move into a branch
  git checkout branch_name

5 To create a branch and also move into it
  git checkout -b branch_name

6 To merge a branch
  git merge branch_name

7 To delete a branch that is merged
  git branch -d branch_name 
  This is also called as soft delete

8 To delete a branch that is not merged
  git branch -D branch_name
  This is also known as hard delete

============================================================================
Note: Whenever a branch is create whatever is the commit history of the 
parent branch will be copied into the new branch

Note: Irrespective of, on which branch a file is created or modified git only
considers form which branch it is commited and the file belongs to that
commited branch only.

============================================================================
Working on the Github
=========================
This is the remote repository into which the code is uploaded and
this process is called as checkin

1 Singup for a github account
2 Signin into that account
3 Click on + on top right corner
4 Click on New repository
5 Enter some repository name
6 Select Public or Private
7 Click on Create repository
8 Go to Push an existing repository from command line and copy paste
  the commands
  Enter username and password of github

========================================================================
To download the code from the remote github we can use the following
2 ways
1 git clone
2 git fetch
3 git pull


========================================================================
git clone
==============
This is used to download the entire remote git repository into the
local machine.This is generally used only one time when all the team
members want a copy of the code present in the git remote server

git clone remote_git_hub_url


git fetch:
==============
This will work only when the code present in the remote server
is different from the code present in the local repository
git fetch will download only the modified files and it will
place them on a seperate branch which is called as "remote branch"
We can go to this remote branch and check if the modifications
ar acceptable,if so we can merge them with the master branch

1 Open github.com
2 Click on the repository that we updated
3 Select a file to be modified and click on Edit icon
4 Make some changes and click on commit changes
5 Open git bash
  git fetch
7 This will download all the modified files and place them on a 
  remote branch
8 To see the list of all the branches
  git branch -a
9 Move into the remote branch
  git checkout remote_branch_name_from_step8
10 Check if the modifications are acceptable if so move to master and merge
   git checkout master
   git merge remote_branch_name_from_step8

git pull
==============
This will also download only the modified files but it will 
merge them with the master
1 Open github.com
2 Click on the repository that we updated
3 Select a file to be modified and click on Edit icon
4 Make some changes and click on commit changes
5 Open git bash
  git pull
  We will be able to see the modified files directly on the master

================================================================================
Day 3
================================================================================
Git Mering
=================
Merging of branches is done based on the time stamp of the commits

1 Create afew commits on master
  touch f1
  git add .
  git commit -m "a"
  touch f2
  git add .
  git commit -m "b"

2 Check the commit history 
  git log --oneline

3 Create a branch and create few commits on it
  git checkout -b test
  touch f3
  git add .
  git commit -m "c"
  touch f4
  git add .
  git commit -m "d

4 Check the commit history
  git log --oneline

5 Move to master and create few more commits
  git checkout master
  touch f5
  git add .
  git commit -m "e"
  touch f6
  git add .
  git commit -m "f"

6 Check the commit history
  git log --oneline

7 To merge the test with master
  git merge test

8 Check the commit history
  git log --oneline

Git rebasing
===============
This is also called as fastforward merge ie the commits coming 
form a branch are projected as the top most commits on the master

1 Repeat Step1 -6 from previous scenario

2 To rebase test with master
  git checkout test
  git rebase master
  git checkout master
  git merge test

==============================================================================
Git cherry pick
======================
This is used to selectively pick only a few commits and bring them 
to the master branch

1 Create a commit on master
  touch f1
  git add .
  git commit -m "a"

2 Create a test branch and create few commits on it
  touch f2
  git add .
  git commit -m "b"
  touch f3
  git add .
  git commit -m "c"
  touch f4
  git add .
  git commit -m "d"
  touch f5
  git add .
  git commit -m "e"

3 Check the commit history
  git log --oneline

4 To checkrry pick only c and e commits to master
  git checkout master
  git cherry-pick c_commitid e_commitid

==============================================================
Day 4
===========================================================
Git reset
==================
This feature helps us to move from one commit to another
and access the code present at the time of that commit

This is of 3 type
1 Hard reset
2 Soft reset
3 Mixed reset

Hard reset
============
1 Create a file with some data with multiple commits
  cat > file1
  one

2 Send it to stagging area and commit
  git add .
  git commit -m "a"

3 Edit the same file and commit it
  cat >> file1
  one
  two
  
  git add .
  git commot -m "b"

4 Add some more content
  cat >> file1
  one
  two
  three

  git add .
  git commit -m "c"

Hardreset
===============
If we do a hard reset head will point to the older commit and we
can see the files as they were present at the time of that commit
git reset --hard b_commitid

Softreset
==================
If we do a soft reset we will see the head point to an older commit
and we can see the files present in the stagging area ie just before
the commit happend what is the status of git we will see that
git reset --soft b_commitid

Mixed reset
=================
This will also move the Head to an older commit but we will see
the files as they were present 2 steps before the commit took place
ie we will see the files in the untracked/modifed section
git reset --mixed b_commitid

========================================================================
Modifing exisiting commits
================================
We can add content to an exisiting commit without 
creating a new commit using "amend"

1 Create few commits
  a ---> b ---> c
  HEAD is pointing to c commit

2 Create a new file and add it to the c commit
  touch file2
  git add .
  git commit --amend -m "c"

3 Check the commit history
  git log --oneline
  It will show only 3 commits
  a--->b--->c

4 The older c commit is removed from the acitve git structure
  and it is called as an orphaned commit
  git reflog
  This will show all the commits(active and orphaned)
===========================================================================
Git stashing
======================
Stash is a section of git into which once the files are pushed 
git cannot access them

To stash all the files present in the stagging area
git stash 

To stash all files present in stagging area and untracked section
git stash -u

To stash all files present in stagging area,untracked section and .gitignore
git stash -a

To see the list of stases
git stash list

To unstash a latest stash
git stash pop

To unstash an older stash
git stash pop stash@{stashno}

=============================================================================
Day 5
=============================================================================
Git sqaush
==============
This is the process of merging multiple commits and making
it look like a single commit.This can be done using the git rebase
command

1 Create a commit history
  a --> b --> c --> d --> e --> f
  HEAD is pointing ti f commit

Note: a commit is called as the "initial commit" and it cannot be
   squashed

In the above scenario we can swaush only a max of 5 commits

2 To squash
  git rebase -i HEAD~5
  This will open the top 5 commits in vi editor
  For which ever commits we want to perform a squash opration
  remove the word "pick" and replace it with "squash"

3 Check the commit history

=====================================================================
Git rebase can also rearrange the commit history order

1 Create a commit history
  a --> b --> c --> d --> e --> f
  HEAD is pointing ti f commit

2 To rearrange the commit history order
  git rebase -i HEAD~5
  Reaarange the commits in whatever order that we want

3 Check the commit history now
  git log --oneline

==============================================================================
Git tagging
================
This is used to place book marks on important commits
Generally it used to identfy the commits that are related to
release events

Tags are classifed into 2 types
1 Light weight tags
2 Annoted Tags

Light weight tags
======================
These tags only have a tage name
To create a light weight tag to the latest commit
git tag some_tag_name

To create a light weight tag to an older commit
git tag some_tag_name older_commit_id

To create an annoted tag to the latest commit
git tag -a "some_tag_name" -m "some msg related to the tag"

To create an annoted tag for an older commit
git tag -a "some_tag_name" -m "some msg related to the tag" older_commit_id

To see the list of all tags
git tag

To push the tags into remote github
git tags --push

To delete a tag locally
git tag -d tagname

To delete a tag from remote github
git push origin :tag_name

==========================================================


























  



 









































































































































.gitignore
==================
This is a special configuration file of git which is used to
store private files info.Any file whose name is mentioned in
.gitignore becomes unaccessable by git

1 Create few files
  touch file1 file2 file4 file4 file5

2 To hide these files
  cat > .gitignore
  file1
  file2
  file3
  file4
  file5
  ctrl+d

3 Check the status of git
  git status
  The above five files cannot be seen

==================================================================================
Branching in Git
=======================
This is a feature of git using which we can create seperate branches for
individual functionalites and place that code on thsoe branches
Once the code is fully developed we can merge it with the master
branch(Master is the default or main branch of git)

1 To see the list of local branch
  git branch

2 To see all the branches local and remote
  git branch -a

3 To create a branch
  git branch branch_name

4 To move into a branch
  git checkout branch_name

5 To create a branch and also move into it
  git checkout -b branch_name

6 To merge a branch
  git merge branch_name

7 To delete a branch that is merged
  git branch -d branch_name
  This is called as soft delete

8 To delete a branch that is not merged
  git branch -D branch_name
  This is called as hard delete

============================================================================
Note: Whenever a branch is created what ever is the commit history
of the parent branch upto that point will be copied to the newly
created branch

Note: Irresepctive of on which branch a file is created or modified
git only considers the branch from where the commit operation took place
=============================================================================
Working on remote github repository
=======================================

Check in (uploading code into github)
-----------------------------------------
1 Signup for a github account and signin into that account
2 Click on + on top right corner and click on "New Repository"
3 Enter some repository name
4 Select Public repository
5 Click on create repository
6 Go to "Copy an exisiting reposiotry from command line"
  And copy paste the 3 commands
  Enter username and password of github.com
================================================================================

Checkout (Downloading for github)
======================================
This is done in 3 ways
1 git clone
2 git fetch 
3 git pull


git clone: This will clone the entire content of the remote
repository into the local machine irresepective of wheter that code is
already present or not

Syntax: git clone https://github.com/intelliqittrainings/git_practice12.git

git fetch: This will download only the modifed files and place
them on a seperate branch called as the "remote branch"
We can go into that remote branch and check if the code changes are ok
If so we can merge it with main or master branch

1 Open github.com
2 Go to the repository that we uploaded
3 Modify any file--->Click on commit changes
4 git fetch
  We will see a remote brahc created
  git branch -a
5 Switch into thsi branch to view the modified files
  git checkout remote_branch_name_from_step4
6 Check the modified files and if the they are ok merge with main branch
  git checkout main
  git merge remote_branch_name_from_step4

git pull
================
This will also download only the modified files but it will not ask
our permission and it directly merges with the necessary branch
1 Open github.com
2 Go to the repository that we uploaded
3 Modify any file--->Click on commit changes
4 git pull
  We can see the modified files on this branch itself

===========================================================================
Day 3
========================================================================





























































 















































































































































